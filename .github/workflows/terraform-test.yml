name: 'Terraform S3 Pipeline'

on:
  push:
    branches: [ "main" ]
    paths:
      - 'environments/**'

permissions:
  contents: read

jobs:
  detect-environments:
    name: 'Detect Changed Environments'
    runs-on: ubuntu-latest
    outputs:
      environments: ${{ steps.detect.outputs.environments }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
    - name: Detect changed environments
      id: detect
      run: |
        changed_files=$(git diff --name-only HEAD~1 HEAD)
        changed_envs=$(echo "$changed_files" | grep '^environments/' | cut -d'/' -f2 | sort -u | jq -R -s -c 'split("\n")[:-1] | map(select(length > 0))')
        echo "environments=$changed_envs" >> $GITHUB_OUTPUT
        echo "Changed environments: $changed_envs"

  terraform:
    name: 'Terraform Plan (${{ matrix.environment }})'
    runs-on: ubuntu-latest
    needs: detect-environments
    strategy:
      matrix:
        environment: ${{ fromJson(needs.detect-environments.outputs.environments || '["none"]') }}

    if: github.event_name == 'push'

    steps:
      - name: Skip if no environment
        if: matrix.environment == 'none'
        run: echo "No environments to plan. Skipping."

      - name: Checkout
        if: matrix.environment != 'none'
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        if: matrix.environment != 'none'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup Terraform
        if: matrix.environment != 'none'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Terraform Format
        if: matrix.environment != 'none'
        run: terraform fmt -check -recursive
        working-directory: ./environments/${{ matrix.environment }}

      - name: Terraform Init
        if: matrix.environment != 'none'
        run: terraform init
        working-directory: ./environments/${{ matrix.environment }}

      - name: Terraform Validate
        if: matrix.environment != 'none'
        run: terraform validate -no-color
        working-directory: ./environments/${{ matrix.environment }}

      - name: Terraform Plan
        if: matrix.environment != 'none'
        id: plan
        run: |
          terraform plan -no-color -input=false \
            -var="bucket_name=${{ vars.BUCKET_NAME }}" \
            -var="environment=${{ matrix.environment }}"
        working-directory: ./environments/${{ matrix.environment }}
        continue-on-error: true

      - name: Terraform Plan Status
        if: matrix.environment != 'none' && steps.plan.outcome == 'failure'
        run: exit 1

  terraform-apply:
    name: 'Terraform Apply (${{ matrix.environment }})'
    runs-on: ubuntu-latest
    needs: terraform
    strategy:
      matrix:
        environment: ${{ fromJson(needs.detect-environments.outputs.environments || '["none"]') }}

    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Skip if no environment
        if: matrix.environment == 'none'
        run: echo "No environments to apply. Skipping."

      - name: Wait for manual approval
        if: matrix.environment != 'none'
        uses: trstringer/manual-approval@v1
        with:
          approvers: cristopher
          minimum-approvals: 1
          instructions: "Revisá el Terraform Plan y aprobá para continuar con el Apply."

      - name: Checkout
        if: matrix.environment != 'none'
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        if: matrix.environment != 'none'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup Terraform
        if: matrix.environment != 'none'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Terraform Init
        if: matrix.environment != 'none'
        run: terraform init
        working-directory: ./environments/${{ matrix.environment }}

      - name: Terraform Apply
        if: matrix.environment != 'none'
        run: terraform apply -auto-approve -input=false \
             -var="bucket_name=${{ vars.BUCKET_NAME }}" \
             -var="environment=${{ matrix.environment }}"
        working-directory: ./environments/${{ matrix.environment }}
