name: 'Terraform S3 Pipeline'  # Nombre visible del pipeline en GitHub Actions

on:
  push:
    branches: [ "main" ]  # Solo se ejecuta cuando haces push a la rama "main"
    paths:
      - 'environments/**'  # Solo si se modifican archivos dentro de "environments/"

permissions:
  contents: read  # Permiso mínimo necesario para clonar el repo

jobs:
  detect-environments:  # Primer job: detectar qué entornos fueron modificados
    name: 'Detect Changed Environments'
    runs-on: ubuntu-latest  # Usa runner Linux más reciente
    outputs:
      environments: ${{ steps.detect.outputs.environments }}  # Exporta los entornos detectados al siguiente job
    steps:
      - name: Checkout
        uses: actions/checkout@v4  # Clona el repositorio
        with:
          fetch-depth: 2  # Clona los últimos 2 commits para detectar diferencias

      - name: Detect changed environments
        id: detect
        run: |
          changed_files=$(git diff --name-only HEAD~1 HEAD)  # Archivos modificados en el último commit
          changed_envs=$(echo "$changed_files" | grep '^environments/' | cut -d'/' -f2 | sort -u | jq -R -s -c 'split("\n")[:-1] | map(select(length > 0))')
          echo "environments=$changed_envs" >> $GITHUB_OUTPUT  # Devuelve los entornos modificados como output
          echo "Changed environments: $changed_envs"  # Muestra por consola los entornos detectados

  terraform:
    name: 'Terraform (${{ matrix.environment }})'  # Segundo job: ejecuta Terraform por cada entorno detectado
    runs-on: ubuntu-latest
    needs: detect-environments  # Espera que termine el job anterior
    if: needs.detect-environments.outputs.environments != '[]'  # Solo corre si hay entornos detectados
    strategy:
      matrix:
        environment: ${{ fromJson(needs.detect-environments.outputs.environments) }}  # Crea un job por entorno detectado

    environment:
      name: ${{ matrix.environment }}  # Define el "environment" para GitHub (permite protecciones y aprobaciones)

    defaults:
      run:
        shell: bash
        working-directory: ./environments/${{ matrix.environment }}  # Define el path base para cada paso

    steps:
      - name: Checkout
        uses: actions/checkout@v4  # Clona nuevamente el repositorio

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4  # Configura las credenciales de AWS
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  # Accede a las credenciales guardadas en GitHub Secrets
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ vars.AWS_REGION }}  # Región de AWS definida en GitHub Variables

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3  # Instala Terraform CLI
        with:
          terraform_version: "1.5.0"  # Usa versión específica de Terraform

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check -recursive  # Verifica formato del código (no lo corrige, solo reporta)

      - name: Terraform Init
        id: init
        run: terraform init  # Inicializa el backend y descarga módulos

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color  # Valida sintaxis y configuración

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -var="bucket_name=${{ vars.BUCKET_NAME }}" -var="environment=${{ matrix.environment }}"
        continue-on-error: true  # Continúa incluso si hay errores (para que podamos comentar el plan en PR si fuera necesario)

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'  # Si falló el plan, el job también falla
        run: exit 1

      # ✅ Este paso solo se ejecuta tras aprobación manual desde la UI de GitHub
      - name: Terraform Apply (Post Approval)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'  # Solo corre en push a main (no en PR)
        run: terraform apply -auto-approve -input=false -var="bucket_name=${{ vars.BUCKET_NAME }}" -var="environment=${{ matrix.environment }}"
