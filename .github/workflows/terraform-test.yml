name: 'Terraform S3 Pipeline'

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (account ID)'
        required: true
        type: choice
        options:
          - '766028941436'
          - '987654321098'

permissions:
  contents: read

jobs:
  detect-environments:
    name: 'Detect Environments'
    runs-on: ubuntu-latest
    outputs:
      environments: ${{ steps.detect.outputs.environments }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Detect environments
      id: detect
      run: |
        envs=$(find environments -mindepth 1 -maxdepth 1 -type d -exec basename {} \; | jq -R -s -c 'split("\n")[:-1]')
        echo "environments=$envs" >> $GITHUB_OUTPUT

  terraform:
    name: 'Terraform (${{ matrix.environment }})'
    runs-on: ubuntu-latest
    needs: detect-environments
    if: needs.detect-environments.outputs.environments != '[]'
    strategy:
      matrix:
        environment: ${{ fromJson(needs.detect-environments.outputs.environments) }}
    environment: ${{ matrix.environment }}

    defaults:
      run:
        shell: bash
        working-directory: ./environments/${{ matrix.environment }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check -recursive

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    # Static Code Analysis - Uncomment to enable
    # - name: Run KICS
    #   uses: checkmarx/kics-github-action@v2.1.0
    #   with:
    #     path: '.'
    #     fail_on: high
    #     output_formats: 'json,sarif'
    #     output_path: kics-results
    #     platform_type: terraform
    #
    # - name: Run Checkov
    #   id: checkov
    #   uses: bridgecrewio/checkov-action@master
    #   with:
    #     directory: .
    #     framework: terraform
    #     output_format: sarif
    #     output_file_path: checkov-results.sarif
    #     quiet: true
    #     soft_fail: true
    #
    # - name: Upload SARIF results
    #   uses: github/codeql-action/upload-sarif@v3
    #   if: always()
    #   with:
    #     sarif_file: checkov-results.sarif

    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color -input=false -var="bucket_name=${{ vars.BUCKET_NAME }}" -var="environment=${{ matrix.environment }}"
      continue-on-error: true

    - name: Update Pull Request
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PLAN: ${{ steps.plan.outputs.stdout }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `## Environment: ${{ matrix.environment }}
          #### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`terraform\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply (Manual)
      if: github.event_name == 'workflow_dispatch' && matrix.environment == github.event.inputs.environment
      run: terraform apply -auto-approve -input=false -var="bucket_name=${{ vars.BUCKET_NAME }}" -var="environment=${{ matrix.environment }}"


