name: 'Terraform S3 Pipeline'

on:
  push:
    branches: [ "main" ]
    paths:
      - 'environments/**'

permissions:
  contents: read

jobs:
  detect-environments:
    name: 'Detect Changed Environments'
    runs-on: ubuntu-latest
    outputs:
      environments: ${{ steps.detect.outputs.environments }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect changed environments
        id: detect
        run: |
          changed_files=$(git diff --name-only HEAD~1 HEAD)
          changed_envs=$(echo "$changed_files" | grep '^environments/' | cut -d'/' -f2 | sort -u | jq -R -s -c 'split("\n")[:-1] | map(select(length > 0))')
          if [[ "$changed_envs" == "[]" || -z "$changed_envs" ]]; then
            changed_envs='["none"]'
          fi
          echo "environments=$changed_envs" >> $GITHUB_OUTPUT
          echo "Changed environments: $changed_envs"

  terraform-plan:
    name: 'Terraform Plan (${{ matrix.environment }})'
    runs-on: ubuntu-latest
    needs: detect-environments
    if: needs.detect-environments.outputs.environments != '["none"]'
    strategy:
      matrix:
        environment: ${{ fromJson(needs.detect-environments.outputs.environments) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Terraform Init
        run: terraform init
        working-directory: ./environments/${{ matrix.environment }}

      - name: Terraform Plan
        run: |
          terraform plan -input=false -no-color -out=plan.tfplan \
            -var="bucket_name=${{ vars.BUCKET_NAME }}" \
            -var="environment=${{ matrix.environment }}"
        working-directory: ./environments/${{ matrix.environment }}

      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: plan-${{ matrix.environment }}
          path: ./environments/${{ matrix.environment }}/plan.tfplan

   terraform-apply:
    name: 'Terraform Apply (${{ matrix.environment }})'
    runs-on: ubuntu-latest
    needs:
      - detect-environments
      - terraform-plan
    if: >
      needs.detect-environments.outputs.environments != '["none"]' &&
      github.ref == 'refs/heads/main' &&
      github.event_name == 'push'
    strategy:
      matrix:
        environment: ${{ fromJson(needs.detect-environments.outputs.environments || '["none"]') }}
    environment: TOKEN_PRUEBA

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Terraform plan
        uses: actions/download-artifact@v4
        with:
          name: plan-${{ matrix.environment }}
          path: ./environments/${{ matrix.environment }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Terraform Init
        run: terraform init
        working-directory: ./environments/${{ matrix.environment }}

      - name: Terraform Apply
        run: terraform apply -input=false plan.tfplan
        working-directory: ./environments/${{ matrix.environment }}
